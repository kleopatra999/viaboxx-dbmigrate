#summary How to use the viaboxx dbmigrate plugin
#labels Featured

=viaboxx dbmigrate plugin = 
Integration of agimatec-tools/dbmigrate into a grails project.

=use the plugin in your grails project=

{{{
grails install-plugin ../viaboxx-dbmigrate/grails-viaboxx-dbmigrate-0.1.zip
}}}

where "../viaboxx-dbmigrate/grails-viaboxx-dbmigrate-0.1.zip" is the path to the plugin package

=prepare your grails project=

  * create a folder "database" (at any location you like, e.g. under grails-app/conf/)
  * create a configuration under grails-app/conf/DbMigrate.groovy
  * create setup.xml or upgrade.xml under database and
 configure "setup.xml" or "upgrade.xml" as mainConfig in DbMigrate.groovy

=examples=

==DbMigrate.groovy==
In your grails project, you can configure the dbmigrate tool with under grails-app/conf/DbMigrate.groovy
All files are relative to "rootDir", where cp:// means classpath, when files are part of grails .war archive or any other .jar 

{{{
dbmigrate {
  // when true, use DataSource.groovy to configure connection to database
  dataSource = true
  // when true, compare DbVersion with application.properties#db.version before starting migration
  checkMigrationRequired = true
  rootDir = "cp://database/"
}

// environment specific settings
environments {
  development {
    dbmigrate {
      mainConfig = "setup.xml"
    }
  }
  test {
    dbmigrate {
      checkMigrationRequired = false
      mainConfig = "setup.xml"
    }
  }
  production {
    dbmigrate {
      mainConfig = "upgrade.xml"
    }
  }
}
}}}

==setup.xml==

The rest of the configuration depends on the use of agimatec-tools/dbmigrate. Detailed information about the configuration and features can be found here:
  * http://code.google.com/p/agimatec-tools/wiki/dbmigrate

{{{
<?xml version="1.0" encoding="UTF-8"?>

<config name="migration">

  <!-- Optional: environment variables, can be used inside scripts as ${DB_USER}.
   Predefined keys:
    DB_USER       : if exists, overrule user from JdbcConfig
    DB_PASSWORD   : if exists, overrule password from JdbcConfig
    DB_SCHEMA     : if exists, overrule schema name of jdbcUrl from JdbcConfig
    DB_URL        : if exists, overrule jdbcUrl from JdbcConfig
    DB_DRIVER        : if exists, overrule jdbcDriver from JdbcConfig
  -->
  <map name="env">
  </map>

  <!-- Scripts = the source path for scripts to scan for -->
  <file name="Scripts-Before-All" dir="setup/before" file=""/>
  <!--<file name="Scripts" dir="setup" file=""/>-->
  <file name="Scripts-After-All" dir="upgrade/after" file=""/>

  <!--<file name="JdbcConfig" file="conf/connect.properties"/>-->

</config>
}}}

== upgrade.xml ==
{{{
<?xml version="1.0" encoding="UTF-8"?>

<config name="migration">

  <map name="env">
  </map>

  <file name="Scripts-Before-All" dir="upgrade/before" file=""/>
  <file name="Scripts" dir="upgrade" file=""/>
  <file name="Scripts-After-All" dir="upgrade/after" file=""/>

  <!--<file name="JdbcConfig" file="database/conf/connect.properties"/>-->
  <!--<text name="to-version" value="@database-version@"/>-->

</config>
}}}

==application.properties==
{{{
db.version=1.0.0
}}}

for more information, contact Roman.Stumm@viaboxx.de